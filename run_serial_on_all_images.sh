#!/bin/bash

# --- Configuration ---
# Directory containing the blurred images and PSFs generated by the Python script
INPUT_DIR="input_images" 
# Directory where the deblurred output images will be saved
OUTPUT_DIR="output_images" 
# Path to your compiled C deconvolution executable
EXECUTABLE="wiener_serial_mpi" 
# Base name used when generating the files (e.g., 'pokhara' if files are pokhara_psf_sigmaX.Y.png)
BASE_NAME="pokhara" 
# Default K value for the Wiener filter (adjust as needed)
K_VALUE="0.001" 
# --- End Configuration ---

# Exit script immediately if any command fails
set -e

# Create the output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"
echo "Ensured output directory exists: $OUTPUT_DIR"

# Check if the executable exists
if [ ! -f "$EXECUTABLE" ]; then
    echo "Error: Executable not found at $EXECUTABLE"
    exit 1
fi

# Check if the input directory exists
if [ ! -d "$INPUT_DIR" ]; then
    echo "Error: Input directory not found at $INPUT_DIR"
    exit 1
fi

echo "Starting batch deconvolution..."

# Find all PSF files matching the pattern in the input directory
# The pattern assumes filenames like: BASE_NAME_psf_sigmaX.Y.png
shopt -s nullglob # Prevent loop from running if no files match
file_count=0
for psf_file in "$INPUT_DIR"/"$BASE_NAME"_psf_sigma*.png; do
    
    # Extract the sigma value part (e.g., "1.5") from the PSF filename
    # This uses parameter expansion to remove prefix and suffix
    sigma_part_ext=${psf_file##*_sigma} # Gets "X.Y.png"
    sigma_part=${sigma_part_ext%.png}   # Removes ".png", gets "X.Y"

    # Check if sigma_part was extracted correctly (basic check)
    if [[ -z "$sigma_part" ]] || [[ "$sigma_part" == *psf* ]]; then
        echo "Warning: Could not extract sigma from filename: $psf_file. Skipping."
        continue
    fi

    # Construct the corresponding blurred image filename
    blurred_file="$INPUT_DIR/${BASE_NAME}_blurred_sigma${sigma_part}.png"
    # Construct the output filename for the deblurred image
    output_file="$OUTPUT_DIR/${BASE_NAME}_deblurred_sigma${sigma_part}.png"

    # Check if the corresponding blurred image file exists
    if [ ! -f "$blurred_file" ]; then
        echo "Warning: Blurred file not found for $psf_file."
        echo "         Expected: $blurred_file. Skipping pair."
        continue
    fi

    # If both files exist, run the deconvolution
    echo "-----------------------------------------------------"
    echo "Processing Sigma: $sigma_part"
    echo "  Input Blurred: $blurred_file"
    echo "  Input PSF:     $psf_file"
    echo "  Output:        $output_file"
    echo "  K Value:       $K_VALUE"
    
    # Execute the C program
    # Use "mpirun -np 1" if your executable was compiled with mpicc
    mpirun -np 1 "$EXECUTABLE" "$blurred_file" "$psf_file" "$output_file" "$K_VALUE"
    
    # If your executable is purely serial (compiled with gcc), use:
    # "$EXECUTABLE" "$blurred_file" "$psf_file" "$output_file" "$K_VALUE"
    
    file_count=$((file_count + 1))
done
shopt -u nullglob # Turn off nullglob

echo "-----------------------------------------------------"
if [ "$file_count" -eq 0 ]; then
  echo "No matching PSF files found in $INPUT_DIR with base name $BASE_NAME."
else
  echo "Batch deconvolution finished. Processed $file_count pairs."
fi

exit 0

